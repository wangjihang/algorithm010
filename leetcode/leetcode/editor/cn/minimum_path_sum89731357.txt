func minPathSum(grid [][]int) int {
	if len(grid) == 0 {
		return 0
	}
	// init
	m, n := len(grid), len(grid[0])
	dp := make([][]int, m)
	for i := 0; i < m; i++ {
		dp[i] = make([]int, n)
		if i > 0 {
			dp[i][0] = dp[i-1][0] + grid[i][0]
		} else {
			dp[i][0] = grid[i][0]
		}
	}
	for j := 0; j < n; j++ {
		if j > 0 {
			dp[0][j] = dp[0][j-1] + grid[0][j]
		} else {
			dp[0][j] = grid[0][j]
		}
	}
	for i := 1; i < m; i++ {
		for j := 1; j < n; j++ {
			dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
		}
	}
	return dp[m-1][n-1]
}

func min(a, b int) int {
	if a > b {
		return b
	}
	return a
}


//runtime:8 ms
//memory:4.4 MB
